#!/bin/bash
[[ -z "$DOTFILES" ]] && source "$(dirname "$(readlink -f "$0")")powertools/zsh/zprofile"

make_symlink(){
    if [ -h "$2" ] && ! [ -e "$2" ]
        then
            echo -e "\033[31mRemoving broken link: $(basename "$2")\033[0m"
            rm "$2"
        fi
    if [ ! -h "$2" ]; then
        echo -en "\033[35mLinking\033[33m "
        ln -fvsn "$1" "$2" | sed "s|$HOME|~|g;s|'||g"
        echo -en "\033[0m"
    fi
}

make_generated_dotfile(){
    echo -en "\033[35mGenerating\033[33m "
    python "$DOTFILES"/generate_config.py "$1" "$2"
    echo -en "\033[0m"
}

deploy_dotfiles(){
    while IFS= read -r l; do
        orig="$DOTFILES/powertools/$(echo "$l" | cut -d: -f1)"
        dest=$(echo "$l" | cut -d: -f2 | sed "s|~|$HOME|g")
        mkdir -p "$(dirname "$dest")"

        IFS=':' read -ra ARGS <<< "$l"

        if [[ " ${ARGS[@]} " =~ "generated" ]]; then
            make_generated_dotfile "$orig" "$dest"
        else
            make_symlink "$orig" "$dest"
        fi

    done < <(perl -pe 's/\$(\w+)/$ENV{$1}/g' "$DOTFILES/$1" | sed -e "s|$HOME|~|g")
}

git -C "$DOTFILES" pull

deploy_dotfiles "powertools/.locations"

case "$1" in
    --no-storeTools)
        ;;
    *)
        sh "$DOTFILES"/storeTools
        ;;
esac
